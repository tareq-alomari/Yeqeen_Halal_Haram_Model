----

يقين (Yaqeen)*الحلال": مودل ذكاء اصطناعي لتصنيف المنتجات الغذائية**

نظام ذكاء اصطناعي متكامل يستخدم معالجة اللغات الطبيعية وتعلم الآلة لتصنيف المنتجات الغذائية تلقائيًا إلى "حلال"، "حرام"، أو "مشتبه فيه" بناءً على قائمة مكوناتها.

[](https://www.google.com/search?q=https://i.imgur.com/k6O6s7C.png)
*لقطة شاشة للواجهة التفاعلية للتطبيق تعمل على تصنيف منتج يحتوي على مكون "Prosciutto"*

## **📝 نظرة عامة**

في ظل تعقيد المنتجات الغذائية الحديثة، يهدف هذا المشروع إلى توفير أداة بسيطة وفعالة لمساعدة المستهلكين المسلمين على اتخاذ قرارات غذائية مستنيرة. يقوم النظام بتحليل النصوص التي تصف المنتج ومكوناته، ويقدم حكمًا شرعيًا متوقعًا مع السبب المحتمل وراء هذا الحكم.

## **✨ الميزات الرئيسية**

  - **تصنيف ثلاثي:** يصنف المنتجات بدقة إلى `حلال`, `حرام`, و `مشتبه فيه`.
  - **تفسير النتائج:** يقدم سببًا واضحًا للتصنيفات غير الحلال، بالاعتماد على قاعدة معرفة شرعية.
  - **دقة عالية:** تم تدريب النموذج على مجموعة بيانات ضخمة وحقق دقة إجمالية تبلغ **96.69%**.
  - **منهجية هجينة:** يجمع بين قوة النظام الخبير القائم على القواعد ومرونة التعلم الآلي للوصول إلى أفضل النتائج.
  - **واجهة تفاعلية:** تم نشره كواجهة ويب سهلة الاستخدام تم بناؤها باستخدام مكتبة `Gradio`.

## **⚙️ كيف يعمل النظام؟ (المنهجية)**

يعتمد النظام على نهج هجين فريد من ثلاث خطوات رئيسية:

1.  **المرحلة الأولى: النظام الخبير:** تم بناء قاعدة معرفة شاملة (قاموس بايثون) تحتوي على مئات المكونات المحرمة والمشبوهة. تم استخدام هذا "العقل المفكر" لتصنيف مجموعة بيانات ضخمة تضم حوالي 2 مليون منتج بشكل آلي ودقيق، مما وفر لنا بيانات تدريب موثوقة.

2.  **المرحلة الثانية: تعلم الآلة:** تم استخدام البيانات المصنفة لتدريب نموذج الانحدار اللوجستي (`Logistic Regression`). تم تحويل النصوص إلى متجهات رقمية باستخدام `TfidfVectorizer` لتمكين النموذج من "فهم" العلاقة بين الكلمات والحكم الشرعي.

3.  **المرحلة الثالثة: التطبيق النهائي:** الواجهة التفاعلية تستخدم هذا النظام الهجين. أولاً، يقوم نموذج تعلم الآلة بإعطاء التنبؤ الأولي. ثانيًا، تقوم قاعدة المعرفة بالبحث في النص لتقديم تفسير واضح ومنطقي للمستخدم.

## **🛠️ التقنيات المستخدمة**

  - **اللغة:** Python 3.8+
  - **تحليل البيانات:** Pandas, NumPy
  - **تعلم الآلة:** Scikit-learn
  - **الواجهة التفاعلية:** Gradio
  - **مكتبات مساعدة:** Joblib (لحفظ النموذج), re (للتعابير النمطية), Matplotlib/Seaborn (لعرض النتائج)

## **📂 هيكل المشروع**

```
halal-food-classifier/
│
├── data/
│   └── openfoodfacts_cleaned.csv      # (اختياري) مجموعة البيانات الأولية
│
├── notebooks/
│   ├── 01_Data_Exploration.ipynb      # كود استكشاف البيانات
│ 
│
├── app/
│   ├── halal_classifier_model.pkl     # ملف النموذج النهائي المحفوظ
│   └── app.py                         # الكود الخاص بتشغيل واجهة Gradio
│
├── 
├── classified_products.parquet        # البيانات المصنفة والجاهزة للتدريب
│
└── README.md                          # هذا الملف
```

## **🚀 الإعداد والتشغيل**

اتبع الخطوات التالية لتشغيل المشروع على جهازك المحلي.

### **1. المتطلبات المسبقة**

  - Python 3.8 أو أحدث
  - أداة `git` مثبتة على جهازك

### **2. خطوات الإعداد**

1.  **استنسخ المستودع:**

    ```bash
    git clone https://github.com/your-username/halal-food-classifier.git
    cd halal-food-classifier
    ```

2.  **(مستحسن) أنشئ بيئة افتراضية:**

    ```bash
    python -m venv venv
    ```

      - على نظامي التشغيل Windows:
        ```bash
        venv\Scripts\activate
        ```
      - على نظامي التشغيل macOS/Linux:
        ```bash
        source venv/bin/activate
        ```

3.  **ثبّت المكتبات المطلوبة:**

    ```bash
    pip install pandas numpy scikit-learn gradio joblib pyarrow
    ```

    *(ملاحظة: `pyarrow` ضرورية لقراءة ملفات `.parquet`)*

### **3. كيفية الاستخدام**

#### **أ. إعادة إنتاج النتائج (التدريب)**

إذا كنت ترغب في استعراض عملية التحليل وتدريب النموذج من البداية:

1.  تأكد من وجود ملف `classified_products.parquet` في المجلد الرئيسي.
2.  افتح المجلد `notebooks/`.
3.  قم بتشغيل دفاتر الملاحظات (`.ipynb`) بالتسلسل من `01` إلى `03`.

#### **ب. تشغيل التطبيق النهائي**

لتشغيل واجهة الويب التفاعلية مباشرة:

1.  انتقل إلى المجلد `app/`:
    ```bash
    cd app
    ```
2.  قم بتشغيل ملف `app.py`:
    ```bash
    python app.py
    ```
3.  سيتم تشغيل التطبيق. افتح متصفح الويب الخاص بك وانتقل إلى العنوان المحلي الذي سيظهر في الطرفية (عادة ما يكون `http://127.0.0.1:7860`).

-----

## **🎓 فريق العمل والإشراف الأكاديمي**

تم تطوير هذا المشروع كمشروع تخرج تطبيقي ضمن متطلبات مادة **تنقيب البيانات** لطلاب **قسم علوم الحاسوب وتقنية المعلومات** في **جامعة إب**.

**إعداد وتطوير المهندسين:**

  - علي القواس
  - طارق العمري

**تحت إشراف:**

  - م. مالك المصنف

**شكر وتقدير خاص:**
نتقدم بجزيل الشكر والتقدير إلى **الدكتور عادل العفيري**، الدكتور الأكاديمي لمادة تنقيب البيانات، على توجيهاته القيمة ودعمه المستمر الذي كان له الأثر الكبير في إنجاز هذا العمل.

-----

## **🔮 العمل المستقبلي**

  - [ ] **تحسين قاعدة المعرفة:** إضافة المزيد من المكونات والمترادفات بلغات متعددة.
  - [ ] **نماذج متقدمة:** تجربة نماذج التعلم العميق (مثل BERT) لتحسين فهم السياق.
  - [ ] **آلية التغذية الراجعة:** تفعيل زر "Flag" في الواجهة لجمع التصحيحات من المستخدمين واستخدامها لتحسين النموذج بشكل دوري.
  - [ ] **معالجة عدم التوازن:** تجربة تقنيات متقدمة مثل SMOTE لمعالجة الفئات النادرة.